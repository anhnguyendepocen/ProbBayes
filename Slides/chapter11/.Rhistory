CEdata$race = as.factor(CEdata$race)
ggplot(CEdata, aes(value)) +
geom_density((color = race))
ggplot(CEdata, aes(income, color = race)) +
geom_density()
require(runjags)
require(coda)
require(ggplot2)
CEdata = read.csv("CEdata.csv", header=T)
## write the model
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(mu_j[genre[i]], invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, g0)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = CEdata$income      # The y values are in the column named income
race = CEdata$race      # The race index is in the column named race
N = length(y)  # Compute the number of observations
J = length(unique(race)) # Compute the number of race categories
the_data <- list("y" = y, "race" = race, "N" = N, "J" = J,
"mu0" = 3, "g0" = 0.001,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
set.seed(123)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000)
## write the model
modelString <-"
model {
## likelihood
for (i in 1:N){
y[i] ~ dnorm(mu_j[race[i]], invsigma2)
}
## priors
for (j in 1:J){
mu_j[j] ~ dnorm(mu, invtau2)
}
invsigma2 ~ dgamma(a_g, b_g)
sigma <- sqrt(pow(invsigma2, -1))
## hyperpriors
mu ~ dnorm(mu0, g0)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
"
y = CEdata$income      # The y values are in the column named income
race = CEdata$race      # The race index is in the column named race
N = length(y)  # Compute the number of observations
J = length(unique(race)) # Compute the number of race categories
the_data <- list("y" = y, "race" = race, "N" = N, "J" = J,
"mu0" = 3, "g0" = 0.001,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
set.seed(123)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000)
posterior
CEdata %>% group_by(race) %>%
summarize(N = n(), M = mean(income),
SE = sd(income) / sqrt(N)) -> Ind_Stats
require(runjags)
require(coda)
require(ggplot2)
CEdata %>% group_by(race) %>%
summarize(N = n(), M = mean(income),
SE = sd(income) / sqrt(N)) -> Ind_Stats
require(tidyverse)
CEdata %>% group_by(race) %>%
summarize(N = n(), M = mean(income),
SE = sd(income) / sqrt(N)) -> Ind_Stats
View(Ind_Stats)
Post_Means <- summary(posterior)[, 2]
Means1 <- data.frame(Type = "Individual", Value = Ind_Stats$M)
Means2 <- data.frame(Type = "Multilevel", Value =
Post_Means[3:(4 + J - 2)])
ggplot(rbind(Means1, Means2), aes(Type, Value)) +
geom_jitter(width = 0.1)
summary(posterior)
Means1
Means2
mean(CEdata$income)
sd(CEdata$income)
the_data <- list("y" = y, "race" = race, "N" = N, "J" = J,
"mu0" = 60000, "g0" = 60000,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
set.seed(123)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000)
posterior
summary(posterior)
the_data <- list("y" = y, "race" = race, "N" = N, "J" = J,
"mu0" = 60000, "g0" = 100,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
set.seed(123)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000)
posterior
summary(posterior)
CEdata %>% group_by(race) %>%
summarize(N = n(), M = mean(income),
SE = sd(income) / sqrt(N)) -> Ind_Stats
Post_Means <- summary(posterior)[, 2]
Means1 <- data.frame(Type = "Individual", Value = Ind_Stats$M)
Means2 <- data.frame(Type = "Multilevel", Value =
Post_Means[3:(4 + J - 2)])
ggplot(rbind(Means1, Means2), aes(Type, Value)) +
geom_jitter(width = 0.1)
the_data <- list("y" = y, "race" = race, "N" = N, "J" = J,
"mu0" = 60000, "g0" = 0.0001,
"a_t" = 1, "b_t" = 1,
"a_g" = 1, "b_g" = 1)
set.seed(123)
posterior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_j", "sigma"),
adapt = 1000,
burnin = 5000,
sample = 5000)
posterior
summary(posterior)
CEdata %>% group_by(race) %>%
summarize(N = n(), M = mean(income),
SE = sd(income) / sqrt(N)) -> Ind_Stats
Post_Means <- summary(posterior)[, 2]
Means1 <- data.frame(Type = "Individual", Value = Ind_Stats$M)
Means2 <- data.frame(Type = "Multilevel", Value =
Post_Means[3:(4 + J - 2)])
ggplot(rbind(Means1, Means2), aes(Type, Value)) +
geom_jitter(width = 0.1)
CEdata = read.csv("CEdata.csv", header=T)
load(url('http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata'))
1/11
set.seed(921)
## first 10 to enroll; second 5 to waitlist; follow the order
sample(seq(1:49), size = 15, replace = FALSE)
setwd("~/Dropbox/NSF work/simulation studies/script/with_noise")
load("~/Dropbox/NSF work/simulation studies/script/with_noise/approach_1and2.RData")
load("~/Dropbox/NSF work/simulation studies/script/with_noise/approach1syn.RData")
### mean tables ###
require(survey)
N <- dim(Sim_Pop)[1]
boxplot(salary ~ field, data = Sim_Pop)
table(Sim_Pop$field)*n/N
field <- 8
####################################
### original sample ################
####################################
boxplot(salary ~ field, data = sdata)
dstrat_org<-svydesign(id=~1, strata=~field, weights=~weight, data=sdata)
svyboxplot(formula = salary ~ as.factor(field), design = dstrat_org, log = "y")
(tbl_org <- svytable(~field, dstrat_org))
plot(tbl_org)
table(sdata$field)
svymean(~salary, dstrat_org)
svytotal( ~ as.factor(field), dstrat_org)
svyby(~ salary, ~as.factor(field),  dstrat_org, svymean)
m <- 10
####################################
### synthetic sample Approach #1 ###
####################################
salary_mean_app1 <- matrix(rep(NA, 2*m), nrow = m)
field_count_app1 <- vector("list", m)
salary_by_field_app1 <- vector("list", m)
for (l in 1:m){
syndata_app1 <- data.frame(exp(sim_syn_w_1[[1]]), sdata$field)
names(syndata_app1) <- c("salary", "weight", "field")
dstrat_syn1 <-svydesign(id=~1, strata=~field, weights=~weight, data=syndata_app1)
# salary_mean
outcome1 <- as.data.frame(svymean(~salary, dstrat_syn1))
salary_mean_app1[l, ] <- c(outcome1$mean, outcome1$salary)
# field_count
outcome2 <- as.data.frame(svytotal( ~ as.factor(field), dstrat_syn1))
field_count_app1[[l]] <- outcome2
# salary_by_field
outcome3 <- as.data.frame(svyby(~ salary, ~as.factor(field),  dstrat_syn1, svymean))
salary_by_field_app1[[l]] <- outcome3
}
# salary_mean
salary_mean_point_app1 <- mean(salary_mean_app1[, 1])
salary_mean_SE_app1 <- var(salary_mean_app1[, 1]) / m + mean(salary_mean_app1[, 2])
salary_mean_point_app1
salary_mean_SE_app1
# field_count & salary_by_field
field_count_pointSE_app1 <- matrix(rep(NA, 2*field), nrow = field)
salary_by_field_pointSE_app1 <- matrix(rep(NA, 2*field), nrow = field)
for (f in 1:field){
field_count_f <- matrix(rep(NA, 2*m), nrow = m)
salary_by_field_f <- matrix(rep(NA, 2*m), nrow = m)
for (l in 1:m){
outcome2 <- field_count_app1[[l]]
field_count_f[l, ] <- c(outcome2$total[f], outcome2$SE[f])
outcome3 <- salary_by_field_app1[[l]]
salary_by_field_f[l, ] <- c(outcome3$salary[f], outcome3$se[f])
}
field_count_pointSE_app1[f, 1] <- mean(field_count_f[, 1])
field_count_pointSE_app1[f, 2] <- var(field_count_f[, 1]) / m + mean(field_count_f[, 2])
salary_by_field_pointSE_app1[f, 1] <- mean(salary_by_field_f[, 1])
salary_by_field_pointSE_app1[f, 2] <- var(salary_by_field_f[, 1]) / m + mean(salary_by_field_f[, 2])
}
field_count_pointSE_app1
salary_by_field_pointSE_app1
####################################
### synthetic sample Approach #1 ###
####################################
salary_mean_app1 <- matrix(rep(NA, 2*m), nrow = m)
field_count_app1 <- vector("list", m)
salary_by_field_app1 <- vector("list", m)
for (l in 1:m){
syndata_app1 <- data.frame(exp(sim_syn_w_1[[l]]), sdata$field)
names(syndata_app1) <- c("salary", "weight", "field")
dstrat_syn1 <-svydesign(id=~1, strata=~field, weights=~weight, data=syndata_app1)
# salary_mean
outcome1 <- as.data.frame(svymean(~salary, dstrat_syn1))
salary_mean_app1[l, ] <- c(outcome1$mean, outcome1$salary)
# field_count
outcome2 <- as.data.frame(svytotal( ~ as.factor(field), dstrat_syn1))
field_count_app1[[l]] <- outcome2
# salary_by_field
outcome3 <- as.data.frame(svyby(~ salary, ~as.factor(field),  dstrat_syn1, svymean))
salary_by_field_app1[[l]] <- outcome3
}
# salary_mean
salary_mean_point_app1 <- mean(salary_mean_app1[, 1])
salary_mean_SE_app1 <- var(salary_mean_app1[, 1]) / m + mean(salary_mean_app1[, 2])
salary_mean_point_app1
salary_mean_SE_app1
mean(salary_mean_app1[, 2])
var(salary_mean_app1[, 1]) / m
####################################
### synthetic sample Approach #1 ###
####################################
salary_mean_app1 <- matrix(rep(NA, 2*m), nrow = m)
field_count_app1 <- vector("list", m)
salary_by_field_app1 <- vector("list", m)
for (l in 1:m){
syndata_app1 <- data.frame(exp(sim_syn_w_1[[l]]), sdata$field)
names(syndata_app1) <- c("salary", "weight", "field")
dstrat_syn1 <-svydesign(id=~1, strata=~field, weights=~weight, data=syndata_app1)
# salary_mean
outcome1 <- as.data.frame(svymean(~salary, dstrat_syn1))
salary_mean_app1[l, ] <- c(outcome1$mean, outcome1$salary)
# field_count
outcome2 <- as.data.frame(svytotal( ~ as.factor(field), dstrat_syn1))
field_count_app1[[l]] <- outcome2
# salary_by_field
outcome3 <- as.data.frame(svyby(~ salary, ~as.factor(field),  dstrat_syn1, svymean))
salary_by_field_app1[[l]] <- outcome3
}
# salary_mean
salary_mean_point_app1 <- mean(salary_mean_app1[, 1])
salary_mean_SE_app1 <- mean(salary_mean_app1[, 2])
salary_mean_point_app1
salary_mean_SE_app1
# field_count & salary_by_field
field_count_pointSE_app1 <- matrix(rep(NA, 2*field), nrow = field)
salary_by_field_pointSE_app1 <- matrix(rep(NA, 2*field), nrow = field)
for (f in 1:field){
field_count_f <- matrix(rep(NA, 2*m), nrow = m)
salary_by_field_f <- matrix(rep(NA, 2*m), nrow = m)
for (l in 1:m){
outcome2 <- field_count_app1[[l]]
field_count_f[l, ] <- c(outcome2$total[f], outcome2$SE[f])
outcome3 <- salary_by_field_app1[[l]]
salary_by_field_f[l, ] <- c(outcome3$salary[f], outcome3$se[f])
}
field_count_pointSE_app1[f, 1] <- mean(field_count_f[, 1])
field_count_pointSE_app1[f, 2] <- mean(field_count_f[, 2])
salary_by_field_pointSE_app1[f, 1] <- mean(salary_by_field_f[, 1])
salary_by_field_pointSE_app1[f, 2] <- mean(salary_by_field_f[, 2])
}
field_count_pointSE_app1
salary_by_field_pointSE_app1
# field_count & salary_by_field
field_count_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
salary_by_field_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
for (f in 1:field){
field_count_final_f <- matrix(rep(NA, 2*m), nrow = m)
salary_by_field_final_f <- matrix(rep(NA, 2*m), nrow = m)
for (l in 1:m){
outcome2 <- field_count_final_app1[[l]]
field_count_final_f[l, ] <- c(outcome2$total[f], outcome2$SE[f])
outcome3 <- salary_by_field_final_app1[[l]]
salary_by_field_final_f[l, ] <- c(outcome3$salary[f], outcome3$se[f])
}
field_count_pointSE_final_app1[f, 1] <- mean(field_count_final_f[, 1])
field_count_pointSE_final_app1[f, 2] <- mean(field_count_final_f[, 2])
salary_by_field_pointSE_final_app1[f, 1] <- mean(salary_by_field_final_f[, 1])
salary_by_field_pointSE_final_app1[f, 2] <- mean(salary_by_field_final_f[, 2])
}
# field_count & salary_by_field
field_count_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
salary_by_field_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
for (f in 1:field){
field_count_final_f <- matrix(rep(NA, 2*m), nrow = m)
salary_by_field_final_f <- matrix(rep(NA, 2*m), nrow = m)
for (l in 1:m){
outcome2 <- field_count_final_app1[[l]]
field_count_final_f[l, ] <- c(outcome2$total[f], outcome2$SE[f])
outcome3 <- salary_by_field_final_app1[[l]]
salary_by_field_final_f[l, ] <- c(outcome3$salary[f], outcome3$se[f])
}
field_count_pointSE_final_app1[f, 1] <- mean(field_count_final_f[, 1])
field_count_pointSE_final_app1[f, 2] <- mean(field_count_final_f[, 2])
salary_by_field_pointSE_final_app1[f, 1] <- mean(salary_by_field_final_f[, 1])
salary_by_field_pointSE_final_app1[f, 2] <- mean(salary_by_field_final_f[, 2])
}
# salary_mean
salary_mean_point_final_app1 <- mean(salary_mean_final_app1[, 1])
salary_mean_final_app1 <- matrix(rep(NA, 2*m), nrow = m)
field_count_final_app1 <- vector("list", m)
salary_by_field_final_app1 <- vector("list", m)
for (l in 1:m){
syndata_final_app1 <- data.frame(exp(sim_syn_w_final_1[[l]]), sdata$field)
names(syndata_final_app1) <- c("salary", "weight", "field")
dstrat_final_syn1 <-svydesign(id=~1, strata=~field, weights=~weight, data=syndata_final_app1)
# salary_mean
outcome1 <- as.data.frame(svymean(~salary, dstrat_final_syn1))
salary_mean_final_app1[l, ] <- c(outcome1$mean, outcome1$salary)
# field_count
outcome2 <- as.data.frame(svytotal( ~ as.factor(field), dstrat_final_syn1))
field_count_final_app1[[l]] <- outcome2
# salary_by_field
outcome3 <- as.data.frame(svyby(~ salary, ~as.factor(field),  dstrat_final_syn1, svymean))
salary_by_field_final_app1[[l]] <- outcome3
}
# salary_mean
salary_mean_point_final_app1 <- mean(salary_mean_final_app1[, 1])
salary_mean_SE_final_app1 <- mean(salary_mean_final_app1[, 2])
salary_mean_point_final_app1
salary_mean_SE_final_app1
# field_count & salary_by_field
field_count_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
salary_by_field_pointSE_final_app1 <- matrix(rep(NA, 2*field), nrow = field)
for (f in 1:field){
field_count_final_f <- matrix(rep(NA, 2*m), nrow = m)
salary_by_field_final_f <- matrix(rep(NA, 2*m), nrow = m)
for (l in 1:m){
outcome2 <- field_count_final_app1[[l]]
field_count_final_f[l, ] <- c(outcome2$total[f], outcome2$SE[f])
outcome3 <- salary_by_field_final_app1[[l]]
salary_by_field_final_f[l, ] <- c(outcome3$salary[f], outcome3$se[f])
}
field_count_pointSE_final_app1[f, 1] <- mean(field_count_final_f[, 1])
field_count_pointSE_final_app1[f, 2] <- mean(field_count_final_f[, 2])
salary_by_field_pointSE_final_app1[f, 1] <- mean(salary_by_field_final_f[, 1])
salary_by_field_pointSE_final_app1[f, 2] <- mean(salary_by_field_final_f[, 2])
}
field_count_pointSE_final_app1
salary_by_field_pointSE_final_app1
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
average_output_app1(sim_syn_w_final_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
average_output_app1(sim_syn_w_final_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
average_output_app1(sim_syn_w_final_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
average_output_app1(sim_syn_w_final_1)
source("inference_functions.R")
average_output_app1(sim_syn_w_1)
average_output_app1(sim_syn_w_final_1)
setwd("~/Dropbox/Hornby and Hu/new package/rstanarm package for model fitting")
CEdata <- read.csv("CEsample.csv")
CEdata <- CEdata[CEdata$Income > 0, ]
fit_notw <- stan_glm(
Income ~ 1,
data = CEdata,
family = Gamma(link="log"),
prior = normal(0, 2, autoscale = FALSE),
refresh = 0,
# for speed of example only
chains = 1, iter = 5000
)
require(rstanarm)
CEdata <- read.csv("CEsample.csv")
CEdata <- CEdata[CEdata$Income > 0, ]
fit_notw <- stan_glm(
Income ~ 1,
data = CEdata,
family = Gamma(link="log"),
prior = normal(0, 2, autoscale = FALSE),
refresh = 0,
# for speed of example only
chains = 1, iter = 5000
)
draws <- as.data.frame(fit_notw)
start <- 500 / 2
syndata <- vector("list", m)
m = 20
draws <- as.data.frame(fit_notw)
start <- 500 / 2
print(fit_notw)
setwd("~/Dropbox/BAYES BOOK/CHAPTERWISE SLIDES PDF/chapter 11 incomplete")
modelString = "
model{
beta1 <- (mu2 - mu1) / (x2 - x1)
beta0 <- mu1 - x1 * (mu2 - mu1) / (x2 - x1)
mu1 ~ dnorm(m1, s1)
mu2 ~ dnorm(m2, s2)
}"
the_data <- list("x1" = 40,
"x2" = 60,
"theta1" = 100,
"theta2" = 50,
"P1" = 1 / 20 ^ 2,
"P2" = 1 / 15 ^ 2)
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
prior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("beta0", "beta1"),
adapt = 1000,
burnin = 5000,
sample = 5000,
inits = initsfunction)
library(ggplot2)
library(ProbBayes)
library(dplyr)
library(runjags)
library(coda)
library(tidyverse)
library(ggridges)
crcblue <- "#2905a1"
gas_prices <- read_csv("gas2017.csv")
ggplot(gas_prices, aes(Temp, Bill)) +
geom_point(size = 1, color = crcblue) +
xlab("Average Monthly Temperature (degrees F)") +
ylab("Monthly Bill (dollars)") +
theme(text = element_text(size=10))
modelString = "
model{
beta1 <- (mu2 - mu1) / (x2 - x1)
beta0 <- mu1 - x1 * (mu2 - mu1) / (x2 - x1)
mu1 ~ dnorm(m1, s1)
mu2 ~ dnorm(m2, s2)
}"
the_data <- list("x1" = 40,
"x2" = 60,
"m1" = 100,
"m2" = 50,
"s1" = 1 / 20 ^ 2,
"s2" = 1 / 15 ^ 2)
initsfunction <- function(chain){
.RNG.seed <- c(1,2)[chain]
.RNG.name <- c("base::Super-Duper",
"base::Wichmann-Hill")[chain]
return(list(.RNG.seed=.RNG.seed,
.RNG.name=.RNG.name))
}
prior <- run.jags(modelString,
n.chains = 1,
data = the_data,
monitor = c("beta0", "beta1"),
adapt = 1000,
burnin = 5000,
sample = 5000,
inits = initsfunction)
prior %>% as.mcmc() %>% as.data.frame() -> prior_df
ggplot(prior_df, aes(beta0, beta1)) +
geom_point(color = crcblue, alpha = 0.2) +
increasefont(Size = 10) +
xlab("beta0") +
ylab("beta1")
